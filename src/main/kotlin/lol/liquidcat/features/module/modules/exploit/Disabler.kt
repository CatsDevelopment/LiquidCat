/*
 * LiquidCat Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/CatsDevelopment/LiquidCat
 */
package lol.liquidcat.features.module.modules.exploit

import lol.liquidcat.event.EventTarget
import lol.liquidcat.event.PacketEvent
import lol.liquidcat.event.UpdateEvent
import lol.liquidcat.features.module.Module
import lol.liquidcat.features.module.ModuleCategory
import lol.liquidcat.utils.sendPacket
import lol.liquidcat.value.BoolValue
import lol.liquidcat.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.play.client.*
import net.minecraft.util.BlockPos
import java.util.*

object Disabler : Module("Disabler", "Disables some Anti-Cheats", ModuleCategory.EXPLOIT) {

    private val mode by ListValue("Mode", arrayOf("NoPayload", "Normal", "Spectate", "Riding", "InvalidPlace", "Flying"), "Normal")
    private val specRandom by BoolValue("SpectateRandomUUID", true)
    private val invalidRiding by BoolValue("InvalidRidingValues", false)

    override val tag: String
        get() = mode

    // Credits: https://github.com/Rilshrink/Minecraft-Disablers/blob/main/Disabler.js

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        when (mode) {
            "NoPayload" -> if (packet is C17PacketCustomPayload) event.cancelEvent()

            "Normal" -> if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive)
                event.cancelEvent()

            "Spectate" -> if (packet is C03PacketPlayer)
                sendPacket(C18PacketSpectate(if (specRandom) UUID.randomUUID() else mc.thePlayer.uniqueID))

            "Flying" -> if (packet is C03PacketPlayer) {
                val capabilities = PlayerCapabilities()

                capabilities.allowFlying = true
                capabilities.isFlying = true
                capabilities.flySpeed = Float.MAX_VALUE

                sendPacket(C13PacketPlayerAbilities(capabilities))
            }

            "Riding" ->	if (packet is C03PacketPlayer)
                sendPacket(
                    if (invalidRiding)
                        C0CPacketInput(Float.NaN, Float.NaN, !mc.thePlayer.movementInput.jump, !mc.thePlayer.movementInput.sneak)
                    else
                        C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak)
                )
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (mode == "InvalidPlace")
            sendPacket(C08PacketPlayerBlockPlacement(BlockPos(
                Double.NaN, Double.NaN, Double.NaN), 1, null, Float.NaN, Float.NaN, Float.NaN))
    }
}